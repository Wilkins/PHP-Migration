#! /usr/bin/env php
<?php

// Autoload
require __DIR__.'/../vendor/autoload.php';

// Argument
$usage = <<<EOT
PHP Migration - A static analyzer for PHP version migration

Usage:
  phpmig [options] <file>...

Options:
  -r, --recursive   Handle directories recursive
  -h --help         Show this screen
EOT;
$args = Docopt::handle($usage);

// Ini set
ini_set('memory_limit', '4096m');

// Filelist
function genFilelist($root, $ext = '.php')
{
    if (!is_dir($root)) {
        return array($root);
    }

    $flist = array();
    $stack = array($root);
    while ($stack) {
        $path = array_shift($stack);
        @$items = scandir($path);
        if (!is_array($items)) {
            continue;
        }

        foreach ($items as $item) {
            if ($item[0] == '.') {
                continue;
            }

            $item = $path.'/'.$item;
            if (is_dir($item)) {
                $stack[] = $item;
            } elseif (substr($item, -4) == $ext) {
                $flist[] = $item;
            }
        }
    }

    return $flist;
}
if ($args['--recursive']) {
    $filelist = array();
    foreach ($args['<file>'] as $file) {
        $file = rtrim($file, '/');
        if (is_dir($file)) {
            $filelist = array_merge($filelist, genFilelist($file));
        } else {
            $filelist[] = $file;
        }
    }
} else {
    $filelist = $args['<file>'];
}

// Load changes
$visitor = new PhpMigration\ChangesVisitor(array(
));

// Instance parser
$parser = new PhpParser\Parser(new PhpParser\Lexer);
$traverser = new PhpParser\NodeTraverser;
$traverser->addVisitor($visitor);

// Parse each file
$visitor->prepare();
foreach ($filelist as $filename) {
    $visitor->setFilename($filename);
    $code = file_get_contents($filename);

    try {
        $stmts = $parser->parse($code);
    } catch (PhpParser\Error $e) {
        printf("%s Parse Error: %s\n", $filename, $e->getMessage());
        continue;
    }

    $stmts = $traverser->traverse($stmts);
}
$visitor->finish();
