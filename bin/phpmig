#! /usr/bin/env php
<?php

/*
 * @author Yuchen Wang <phobosw@gmail.com>
 *
 * Code is compliant with PSR-0, PSR-1, PSR-2 and PSR-4 standards
 * http://www.php-fig.org/
 */

// Autoload
require __DIR__.'/../vendor/autoload.php';

// Argument
$usage = <<<EOT
PHP Migration - A static analyzer for PHP version migration

Usage:
  phpmig [options] <file>...

Options:
  -r, --recursive   Handle directories recursive
  -h --help         Show this screen
EOT;
$args = Docopt::handle($usage);

// Ini set
ini_set('memory_limit', '4096m');

// Filelist
function genFilelist($root, $ext = 'php')
{
    $iterator = new RecursiveDirectoryIterator($root);
    $iterator = new RecursiveIteratorIterator($iterator);
    $iterator = new RegexIterator($iterator, '/\.'.$ext.'$/');

    $files = array();
    foreach ($iterator as $filename) {
        $files[] = (string) $filename;
    }
    return $files;
}
if ($args['--recursive']) {
    $filelist = array();
    foreach ($args['<file>'] as $filename) {
        $filename = rtrim($filename, '/');
        if (is_dir($filename)) {
            $filelist = array_merge($filelist, genFilelist($filename));
        } else {
            $filelist[] = $filename;
        }
    }
} else {
    $filelist = $args['<file>'];
}

// Load changes into vistor
$visitor = new PhpMigration\ChangesVisitor(array(
));

// Instance parser
$parser = new PhpParser\Parser(new PhpParser\Lexer\Emulative);
$traverser = new PhpParser\NodeTraverser;

$traverser->addVisitor(new PhpParser\NodeVisitor\NameResolver);
$traverser->addVisitor($visitor);

// Parse each file
$visitor->prepare();
foreach ($filelist as $filename) {
    $visitor->setFilename($filename);
    $code = file_get_contents($filename);

    try {
        $stmts = $parser->parse($code);
    } catch (PhpParser\Error $e) {
        PhpMigration\Logging::warning('Parse error {file}, error message "{exception}"', array(
            'exception' => $e,
            'file' => $filename,
        ));
        continue;
    }

    $stmts = $traverser->traverse($stmts);
}
$visitor->finish();
